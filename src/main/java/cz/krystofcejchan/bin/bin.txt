/*
* /*@Override public void handleUserAudio(@Nonnull UserAudio userAudio) {
* GuildVoiceState voiceState = msgEvent.getEvent().getMember().getVoiceState();
*
* if (userAudio.getUser().equals(msgEvent.getEvent().getAuthor())) {
* guild.getAudioManager();
*
* rescievedBytes.add(userAudio.getAudioData(1.5f));// 1.0 â†’ 100%
*
* if (talkingMembersCount.size() > MAX_VALUE) { if (isAllowedToCarryOn &&
* haveUsersStoppedTalking(talkingMembersCount)) { try {
*
* // System.out.println(combinedAudio.getUsers().size()); int size = 0; for
* (byte[] bs : rescievedBytes) { size += bs.length; } byte[] decodedData = new
* byte[size]; int i = 0; for (byte[] bs : rescievedBytes) { for (int j = 0; j <
* bs.length; j++) { decodedData[i++] = bs[j]; } }
*
* SoundFile.setTitle(msgEvent.getEvent().getGuild().getId());
*
* File file = new File(SoundFile.getWholePath());
*
* getWavFile(file, decodedData); SpeechToText StT = new SpeechToText(); String
* transcription = StT.getTranscription();
* guild.getTextChannelById(CurrentTextChannel.getId()).sendMessage(
* transcription).queue(); if
* (!((SpeechToText.Language.getLang().equals("en-GB") ||
* SpeechToText.Language.getLang().equals("en-US")))) { transcription =
* LibraryClass.runPyScript(ScriptPathPointer.translator, transcription);
* guild.getTextChannelById(CurrentTextChannel.getId()).sendMessage(
* transcription).queue(); }
*
* System.out.println(transcription); // CurrentTextChannel ctch = new
* CurrentTextChannel();
*
* SpeechToText.setText(transcription); ListeningCommandManager
* listeningCommandManager = new ListeningCommandManager();
*
* IListeningCommands command =
* listeningCommandManager.getCommand(transcription); if (command != null)
* command.doTask(msgEvent.getEvent());
*
* else {
*
* msgEvent.getEvent().getMessage().reply(
* "There's been an error\nCommand either does not exist or I couldn't understand you"
* ) .queue(); }
*
* // audioManager.closeAudioConnection(); if
* (haveUsersStoppedTalking(talkingMembersCount)) isAllowedToCarryOn = false;
*
* System.out.println("its done aint it"); } catch (Exception e) {
* System.out.println(e); }
*
* } } }
*
* }
*

import requests, sys


def getweather():
    i = 1
    searchKeys = ""
    while i < len(sys.argv):
        searchKeys += sys.argv[i] + " "
        i += 1

    url = 'https://wttr.in/{}'.format(searchKeys[:-1])+'?format=j1'
    try:
        data = requests.get(url)
        T = data.text
    except:
        T = "Error Occurred"
    print(T)


if __name__ == "__main__":
    getweather()





    /*  EmbedBuilder builder = new EmbedBuilder();
        builder.setColor(UtilityClass.getRandomColor());
        builder.setTitle("Help command");
        builder.setDescription("All Slash commands (" + new SlashCommandManager().getAllCommands().size() + ")");
        for (ISlashCommands command : new SlashCommandManager().getAllCommands()) {
            StringBuilder optData = new StringBuilder();
            if (command.takesArguments() != ArgumentSlashCommandCount.NONE) {
                optData = new StringBuilder();
                for (OptionData optionData : Objects.requireNonNull(command.getOptionData())) {
                    optData.append(optionData.getName()).append(", ");
                }
                optData = new StringBuilder(Optional.of(optData.toString())
                        .filter(str -> str.lastIndexOf(" ") == str.length() - 1)
                        .map(str -> str.substring(0, str.length() - 2))
                        .orElse(optData.toString()));
            }
            if (command.takesArguments() == ArgumentSlashCommandCount.NONE) {
                builder.addField(command.getName(), "__" + command.getDescription() + "__\nTakes Arguments: **"
                                + command.takesArguments() + "**\nIs guild only: **" + command.isGuildOnly()
                                + "**\nMust user's joined channel match bot's channel: **"
                                + command.isUserRequiredToBeInTheSameChannelAsBot() + "**",
                        true);
            } else {
                builder.addField(command.getName(), "__" + command.getDescription() + "__\nTakes Arguments: **"
                                + command.takesArguments() + "**\t:\t*" + optData + "*\nIs guild only: **"
                                + command.isGuildOnly()
                                + "**\nMust user's joined channel match bot's channel: **"
                                + command.isUserRequiredToBeInTheSameChannelAsBot() + "**",
                        true);
            }

        }
        slashEvent.replyEmbeds(builder.build()).queue();*/